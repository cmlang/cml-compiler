
@concept Functions
{
    required_item: Item;
    single_item: Item?;
    items: Item*;

    /empty_items = empty(items);
    /present_items = present(items);

    /empty_single_item = empty(single_item);
    /present_single_item = present(single_item);

    /required_empty_single_item = empty(required_item);
    /required_present_single_item = present(required_item);

    /items_first = first(items);
    /items_last = last(items);

    /single_item_first = first(single_item);
    /single_item_last = last(single_item);

    /required_item_first = first(required_item);
    /required_item_last = last(required_item);

    /at_least_one_large_item = items | exists: size > 100;
    /all_large_items = items | all: size > 100;

    /large_item_exists = single_item | exists: size > 100;
    /large_item_all = single_item | all: size > 100;

    /required_item_exists = required_item | exists: size > 100;
    /required_item_all = required_item | all: size > 100;

    /items_select = items | select: size > 100;
    /items_reject = items | reject: size > 100;

    /single_item_select = single_item | select: size > 100;
    /single_item_reject = single_item | reject: size > 100;

    /required_item_select = required_item | select: size > 100;
    /required_item_reject = required_item | reject: size > 100;

    /items_collect = items | collect: size;
    /single_item_collect = single_item | collect: size;
    /required_item_collect = required_item | collect: size;

    /sorted_items = items | sort: i1, i2 -> compare(i1.size, i2.size);
    /reversed_items = reverse(items);

    /new_item = Item(12);
}

@concept Item
{
    size: integer;
}

@task poj: poj
{
    groupId = "cml-expressions";
    artifactId = "cml-expressions-functions";
    artifactVersion = "1.0-SNAPSHOT";
    packageName = "functions.poj";
    packagePath = "functions/poj";
}

@task pop: pop
{
    moduleName = "cml_expressions_functions_pop";
    moduleVersion = "1.0";
}
