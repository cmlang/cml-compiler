
@concept Types
{
    req: Ancestor;
    opt: Ancestor?;
    seq: Ancestor*;

    /type_check_is = req is Descendant;
    /type_check_is_not = req isnt Descendant;

//  /req_to_req_type_cast_asq = req as? Descendant; // <- error: cannot use 'as?' to cast to required type
//  /opt_to_req_type_cast_asq = opt as? Descendant; // <- error: cannot use 'as?' to cast to required type
//  /seq_to_req_type_cast_asq = seq as? Descendant; // <- error: cannot use 'as?' to cast to required type

    /req_to_req_type_cast_asb = req as! Descendant;
    /opt_to_req_type_cast_asb = opt as! Descendant;
//  /seq_to_req_type_cast_asb = seq as! Descendant; // <- error: cannot cast from sequence to required type

    /req_to_opt_type_cast_asb = req as! Descendant?;
    /req_to_opt_type_cast_asq = req as? Descendant?;

    /opt_to_opt_type_cast_asb = opt as! Descendant?;
    /opt_to_opt_type_cast_asq = opt as? Descendant?;

//  /seq_to_opt_type_cast_asb = seq as! Descendant?; // <- error: cannot cast from sequence to optional
//  /seq_to_opt_type_cast_asq = seq as? Descendant?; // <- error: cannot cast from sequence to optional

    /req_to_seq_type_cast_asb = req as! Descendant*;
    /opt_to_seq_type_cast_asb = opt as! Descendant*;
    /seq_to_seq_type_cast_asb = seq as! Descendant*;

    /req_to_seq_type_cast_asq = req as? Descendant*;
    /opt_to_seq_type_cast_asq = opt as? Descendant*;
    /seq_to_seq_type_cast_asq = seq as? Descendant*;

    /descendants = for a in seq | select: a is Descendant;
}

@concept Ancestor;

@concept Descendant: Ancestor;

@task poj: poj
{
    groupId = "cml-expressions";
    artifactId = "cml-expressions-types";
    artifactVersion = "1.0-SNAPSHOT";
    packageName = "types.poj";
    packagePath = "types/poj";
}

@task pop: pop
{
    moduleName = "cml_expressions_types_pop";
    moduleVersion = "1.0";
}
