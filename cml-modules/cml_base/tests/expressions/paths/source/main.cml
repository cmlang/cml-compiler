
@concept ExpressionCases
{
    // Used by paths below:
    foo: String;
    somePath: SomeConcept;
    somePathList: SomeConcept*;

    // Path-derived properties:
    /self_var = self;
    /single_var = foo;
    /derived_some_path = self.somePath;
    /path_var = somePath.bar;
    /path_var2 = somePath.oneMorePath.etc;
    /path_var3 = somePathList.oneMorePath.etc;
    /path_bars = somePathList.bar;
    /path_foos = somePathList.foos;

    /sorted_list = somePathList | sort: item1, item2 -> compare(item1.value, item2.value);

    opt_prop: AnotherConcept?;
    /opt_flag = opt_prop.flag;

    /none_prop: SomeConcept? = none;
}

@concept SomeConcept
{
    value: integer;
    bar: Bar;
    foos: AnotherConcept*;
    oneMorePath: AnotherConcept;
}

@concept AnotherConcept
{
    etc: Etc;
    flag: boolean = true;
}

@concept Bar;
@concept Etc;

@task paths_poj: poj
{
    groupId = "cml-expressions";
    artifactId = "cml-expressions-paths";
    artifactVersion = "1.0-SNAPSHOT";
    packageName = "paths.poj";
    packagePath = "paths/poj";
}

@task paths_cmlc_java: cmlc_java
{
    groupId = "cml-expressions";
    artifactId = "cml-expressions-paths-cmlc";
    artifactVersion = "1.0-SNAPSHOT";
    packageName = "paths.cmlc";
    packagePath = "paths/cmlc";
}

@task paths_pop: pop
{
    moduleName = "cml_expressions_paths_pop";
    moduleVersion = "1.0";
}

@task paths_cmlc_py: cmlc_py
{
    moduleName = "cml_expressions_paths_cmlc";
    moduleVersion = "1.0";
}
