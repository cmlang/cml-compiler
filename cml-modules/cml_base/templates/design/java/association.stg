
association_singleton(association) ::= <<
private static final <association_name(association)> singleton = new <association_name(association)>();
>>

association_new(association) ::= ""

association_init_param() ::= "Class\<?> cls"

association_init_statement(association_end, association) ::= <<
if (<type_name(association_end.concept)>.class.isAssignableFrom(cls))
{
<indent()><type_name(association_end.concept)><class_name_suffix>.set<type_name(association)>(singleton);
}
>>

association_name(association) ::= <<
<type_name(association)>
>>

association_field_decl(association_end) ::= <<
private final Map\<<field_type(association_end.concept)>, <field_type(association_end.property)>\> <association_end.property.name> = new HashMap\<>();
>>

association_constructor(association) ::= ""

association_link_statement_seq(association_end) ::= <<
final <field_type(association_end.property)> <association_link_seq(association_end)> = <association_link_field(association_end)>.computeIfAbsent(<association_link_source(association_end)>, key -> new ArrayList\<>());
if (!<association_link_seq(association_end)>.contains(<association_link_target(association_end)>))
{
<indent()><association_link_seq(association_end)>.add(<association_link_target(association_end)>);
}
>>

association_link_statement_non_seq(association_end) ::= <<
<association_link_field(association_end)>.put(<association_link_source(association_end)>, <association_link_target(association_end)>);
>>

association_link_seq_suffix() ::= "List"

association_getter_name(property) ::= <<
<property.name; format="camel-case">Of
>>

association_getter_statements_seq(association_end) ::= <<
final <field_type(association_end.property)> <association_link_seq(association_end)> = <association_link_field(association_end)>.get(<association_link_source(association_end)>);

return (<association_link_seq(association_end)> == null) ? Collections.emptyList() : new ArrayList\<>(<association_link_seq(association_end)>);
>>

association_getter_statements_non_seq(association_end) ::= <<
return Optional.ofNullable(<association_link_field(association_end)>.get(<association_link_source(association_end)>));
>>

class_association_field(association) ::= <<
private static <field_type(association)> <field_name(association)>;
>>

association_setter_name(association) ::= <<
set<association_name(association)>
>>

association_setter_param(association) ::= <<
<association_name(association)> association
>>

association_setter_statements(association) ::= <<
<field_name(association)> = association;
>>

association_static_initializer_statement(association, concept) ::= <<
<association_name(association)>.init(<field_type(concept)>.class);
>>

association_one_to_many_link_method_statements(association) ::= <<
for (<type_name(association.manyProperty.type)> <field_name(association.manyProperty.type)>: <field_name(association.manyProperty)>) link(<field_name(association.oneProperty)>, <field_name(association.manyProperty.type)>);
>>

association_link_call_seq(property) ::= <<
<field_name(property.association)>.linkMany(<actual_self_field(property.concept)>, <field_name(property)>);
>>

association_link_call_non_seq(property) ::= <<
<field_name(property.association)>.link(<field_name(property)>, <actual_self_field(property.concept)>);
>>

association_class_getter_expr(property) ::= <<
<field_name(property.association)>.<field_name(property)>Of(<actual_self()>)<\\>
<if(property.type.required)><\\>
.get()<\\>
<endif>
>>

