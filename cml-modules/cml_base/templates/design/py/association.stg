
association_link_methods(association) ::= <<
<if(association.oneToMany)><\\>
<association_one_to_many_link_method(association)>

<endif><\\>
<association_link_method(association)>
>>

association_singleton(association) ::= <<
_singleton = None
>>

association_new(association) ::= <<
def __new__(cls) -> '<association_name(association)>':
<indent()>if cls._singleton is None:
<indent()><indent()>cls._singleton = super(<association_name(association)>, cls).__new__(cls)
<indent()>return cls._singleton
>>

association_name(association) ::= <<
_<type_name(association)>
>>

association_init(association) ::= ""

association_field_decl(association_ends) ::= ""

association_constructor(association) ::= <<
<instance_operation(
    name=constructor_name(type_name(association)),
    params=[],
    result_type=[],
    statements=association_constructor_statements(association)
)>
>>

association_constructor_statements(association) ::= <<
<association.associationEnds:association_field_init(); separator="\n">
>>

association_field_init(association_end) ::= <<
<field_access(association_end.associatedProperty)> = {}  # type: Dict[<field_type(association_end.associatedConcept)>, <field_type(association_end.associatedProperty)>]
>>

association_link_statement_seq(association_end) ::= <<
if <association_link_source(association_end)> in <association_link_field(association_end)>:
<indent()><association_link_seq(association_end)> = <association_link_field(association_end)>[<association_link_source(association_end)>]
else:
<indent()><association_link_seq(association_end)> = [<association_link_target(association_end)>]
if not (<association_link_target(association_end)> in <association_link_seq(association_end)>):
<indent()><association_link_seq(association_end)>.append(<association_link_target(association_end)>)
<association_link_field(association_end)>[<association_link_source(association_end)>] = <association_link_seq(association_end)>
>>

association_link_statement_non_seq(association_end) ::= <<
<association_link_field(association_end)>[<association_link_source(association_end)>] = <association_link_target(association_end)>
>>

association_link_seq_suffix() ::= "_list"

association_getter_name(property) ::= <<
<property.name; format="underscore-case">_of
>>

association_getter_statements_non_seq(association_end) ::= <<
if <association_link_source(association_end)> in <association_link_field(association_end)>:
<indent()>return <association_link_field(association_end)>[<association_link_source(association_end)>]
else:
<indent()>return None
>>

association_getter_statements_seq(association_end) ::= <<
if <association_link_source(association_end)> in <association_link_field(association_end)>:
<indent()><association_link_seq(association_end)> = <association_link_field(association_end)>[<association_link_source(association_end)>]
else:
<indent()><association_link_seq(association_end)> = []
return list(<association_link_seq(association_end)>)
>>

class_association_field(association) ::= <<
_<field_name(association)> = <association_name(association)>()
>>

class_association_setter(association) ::= ""

association_one_to_many_link_method_statements(association) ::= <<
for <field_name(association.manyProperty.type)> in <field_name(association.manyProperty)>: self.link(<field_name(association.oneProperty.type)>=<field_name(association.oneProperty)>, <field_name(association.manyProperty.type)>=<field_name(association.manyProperty.type)>)
>>

association_link_call_seq(property) ::= <<
self._<field_name(property.association)>.link_many(<actual_self_field()>, <field_name(property)>)
>>

association_link_call_non_seq(property) ::= <<
self._<field_name(property.association)>.link(<field_name(property.type)>=<field_name(property)>, <field_name(property.concept)>=<actual_self_field()>)
>>

association_class_getter_expr(property) ::= <<
self._<field_name(property.association)>.<field_name(property)>_of(<actual_self_field()>)
>>


