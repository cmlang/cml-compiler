
import "/lang/common.stg"

// Language

lang ::= [
    "fields": true
]

// Modifiers

modifier(m) ::= <<
<m><\ >
>>

abstract_keyword() ::= <<
abstract<\ >
>>

new_keyword() ::= <<
new<\ >
>>

// Blocks

block(statements) ::= <<
<\n>{<\n><indent()><statements; anchor><\n>}
>>

block_empty() ::= <<
<\ >{}
>>

// Statement

statement_terminator() ::= ";"

// Call

super_constructor_name() ::= "super"

this_constructor_name() ::= "this"

// Strings

to_string_name() ::= "toString"

to_string_expr(concept) ::= <<
new StringBuilder(<type_name(concept)>.class.getSimpleName())
<indent()><to_string_appends(concept.allProperties); anchor>
>>

to_string_appends(properties) ::= <<
.append('(')
<to_string_fields(properties, ".append(\", \")\n")><\\>
<newLineIf(properties)><\\>
.append(')')
.toString()
>>

to_string_field(property) ::= <<
.append("<field_name(property)>=")<to_string_field_value(property)>
>>

to_string_field_value_required(property) ::= <<
.append(String.format("\"%s\"", <getter_call(property)>))
>>

to_string_field_value_optional(property) ::= <<
.append(<getter_call(property)>.isPresent() ? String.format("\"%s\"", <getter_call(property)>) : "not present")
>>

to_string_field_value_set(property) ::= <<
.append(<getter_call(property)>)
>>

// Operation

operation_keyword() ::= ""

operation_name(name) ::= <<
<name; format="camel-case">
>>

static_operation_modifier() ::= "static "

operation_header_content(instance, name, params, result_type) ::= <<
<if(result_type)><result_type><\ ><endif><\\>
<name>(<params:var_decl(); separator=", ">)
>>

var_decl(typed_element) ::= <<
<field_type(typed_element)> <field_name(typed_element)>
>>

local_var_decl(typed_element) ::= <<
<var_decl(typed_element)>
>>

return(expression) ::= <<
return <expression; anchor>;
>>

// Fields

field_init(named_element) ::= <<
<field_access(named_element)> = <field_name(named_element)>;
>>

field_name(named_element) ::= <<
<named_element.name; format="camel-case">
>>

field_access(named_element) ::= <<
this.<field_name(named_element)>
>>

field_type_optional(type) ::= <<
@Nullable <type_name(type)>
>>

field_type_set(type) ::= <<
Set\<<type_name(type)>\>
>>

field_decl(typed_element) ::= <<
private final <var_decl(typed_element)>;
>>

// Getters

getter_name(property) ::= <<
get<property.name; format="pascal-case">
>>

interface_getter_annotations(property) ::= ""

class_getter_annotations(property) ::= ""

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
Optional\<<type_name(type)>\>
>>

getter_type_set(type) ::= <<
Set\<<type_name(type)>\>
>>

getter_field_value_required(property) ::= <<
<field_access(property)>
>>

getter_field_value_optional(property) ::= <<
Optional.ofNullable(<field_access(property)>)
>>

getter_field_value_set(property) ::= <<
Collections.unmodifiableSet(<field_access(property)>)
>>

getter_call(property) ::= <<
get<property.name; format="pascal-case">()
>>

path_getter_call(name) ::= <<
get<name; format="pascal-case">()
>>


// Interfaces

interface_keyword() ::= "interface "

// Classes

class_keyword() ::= "class "

class_type_name(name) ::= <<
<name; format="pascal-case">
>>

constructor_name(class_name) ::= <<
<class_name; format="pascal-case">
>>

// Ancestors

ancestor_list(abstract, ancestors, interfaces) ::= <<
<if(ancestors)> extends <ancestors:type_name();separator=", "><endif><\\>
<if(interfaces)> implements <interfaces:type_name();separator=", "><endif>
>>

// Type

primitive_type_boolean() ::= "boolean"
primitive_type_integer() ::= "int"
primitive_type_decimal() ::= "BigDecimal"
primitive_type_string() ::= "String"
primitive_type_regex() ::= "Pattern"
primitive_type_byte() ::= "byte"
primitive_type_short() ::= "short"
primitive_type_long() ::= "long"
primitive_type_float() ::= "float"
primitive_type_double() ::= "double"
primitive_type_char() ::= "char"

type_hint_name(name) ::=<<
<class_type_name(name)>
>>

// Literal

literal_expr_string(text) ::= <<
"<text>"
>>

literal_expr_integer(text) ::= <<
<text>
>>

literal_expr_long(text) ::= <<
<text>
>>

literal_expr_short(text) ::= <<
<text>
>>

literal_expr_byte(text) ::= <<
<text>
>>

literal_expr_decimal(text) ::= <<
new BigDecimal("<text>")
>>

literal_expr_float(text) ::= <<
<text>
>>

literal_expr_double(text) ::= <<
<text>
>>

// Constants

null_value() ::= "null"

// Operations

operation_add(left, right) ::= "<left> + <right>"
operation_sub(left, right) ::= "<left> - <right>"
operation_mul(left, right) ::= "<left> * <right>"
operation_div(left, right) ::= "<left> / <right>"
operation_mod(left, right) ::= "<left> % <right>"
operation_exp(left, right) ::= "Math.pow(<left>, <right>)"

operation_eq(left, right) ::= "<left> == <right>"
operation_ineq(left, right) ::= "<left> != <right>"
operation_gt(left, right) ::= "<left> > <right>"
operation_gte(left, right) ::= "<left> >= <right>"
operation_lt(left, right) ::= "<left> \< <right>"
operation_lte(left, right) ::= "<left> \<= <right>"

operation_and(left, right) ::= "<left> && <right>"
operation_or(left, right) ::= "<left> || <right>"
operation_not(expr) ::= "!<expr>"
