
import "/lang/common.stg"

// Language

lang ::= [
    "fields": true
]

// Void

void() ::= "void"

// Modifiers

modifier(m) ::= <<
<m><\ >
>>

abstract_keyword() ::= <<
abstract<\ >
>>

new_keyword() ::= <<
new<\ >
>>

// Blocks

block(statements) ::= <<
<\n>{<\n><indent()><statements; anchor><\n>}
>>

block_empty() ::= <<
<\ >{}
>>

// Statement

statement_terminator() ::= ";"

// Call

super_constructor_name() ::= "super"

this_constructor_name() ::= "this"

// Strings

to_string_name() ::= "toString"

to_string_expr(concept) ::= <<
new StringBuilder(<type_name(concept)>.class.getSimpleName())
<indent()><to_string_appends(concept.printableProperties); anchor>
>>

to_string_appends(properties) ::= <<
.append('(')
<to_string_fields(properties, ".append(\", \")\n")><\\>
<newLineIf(properties)><\\>
.append(')')
.toString()
>>

to_string_field(property) ::= <<
.append("<field_name(property)>=")<to_string_field_value(property)>
>>

to_string_field_value_required(property) ::= <<
.append(String.format("\"%s\"", <getter_call(property)>))
>>

to_string_field_value_optional(property) ::= <<
.append(<getter_call(property)>.isPresent() ? String.format("\"%s\"", <getter_call(property)>) : "not present")
>>

to_string_field_value_sequence(property) ::= <<
.append(<getter_call(property)>)
>>

// Operation

operation_keyword() ::= ""

operation_name(name) ::= <<
<name; format="camel-case">
>>

static_operation_modifier() ::= "static "

operation_header_content(instance, name, params, result_type) ::= <<
<if(result_type)><result_type><\ ><endif><\\>
<name>(<params:var_decl(); separator=", ">)
>>

var_decl(object) ::= <<
<if(object.name || object.type)><\\>
<field_type(object)> <field_name(object)><\\>
<else><\\>
<object><\\>
<endif>
>>

local_var_decl(typed_element) ::= <<
<var_decl(typed_element)>
>>

return(expression) ::= <<
return <expression; anchor>;
>>

// Fields

field_init(named_element) ::= <<
<field_access(named_element)> = <field_name(named_element)>;
>>

field_name(named_element) ::= <<
<named_element.name; format="camel-case">
>>

field_access(named_element) ::= <<
this.<field_name(named_element)>
>>

field_type_optional(type) ::= <<
@Nullable <type_name(type)>
>>

field_type_sequence(type) ::= <<
List\<<type_name(type)>\>
>>

field_decl(typed_element) ::= <<
private final <var_decl(typed_element)>;
>>

// Getters

getter_name(property) ::= <<
get<property.name; format="pascal-case">
>>

interface_getter_annotations(property) ::= ""

class_getter_annotations(property) ::= ""

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
Optional\<<type_name(type)>\>
>>

getter_type_sequence(type) ::= <<
List\<<type_name(type)>\>
>>

getter_field_value_required(property) ::= <<
<field_access(property)>
>>

getter_field_value_optional(property) ::= <<
Optional.ofNullable(<field_access(property)>)
>>

getter_field_value_sequence(property) ::= <<
Collections.unmodifiableList(<field_access(property)>)
>>

getter_call(property) ::= <<
get<property.name; format="pascal-case">()
>>

// Interfaces

interface_keyword() ::= "interface "

// Classes

class_keyword() ::= "class "

class_type_name(name) ::= <<
<name; format="pascal-case">
>>

constructor_name(class_name) ::= <<
<class_name; format="pascal-case">
>>

// Ancestors

ancestor_list(abstract, ancestors, interfaces) ::= <<
<if(ancestors)> extends <ancestors:type_name();separator=", "><endif><\\>
<if(interfaces)> implements <interfaces:type_name();separator=", "><endif>
>>

// Associations

association_singleton(association) ::= <<
private static final <association_name(association)> singleton = new <association_name(association)>();
>>

association_new(association) ::= ""

association_init_param() ::= "Class\<?> cls"

association_init_statement(association_end, association) ::= <<
if (<type_name(association_end.concept)>.class.isAssignableFrom(cls))
{
<indent()><type_name(association_end.concept)>.set<type_name(association)>(singleton);
}
>>

association_name(association) ::= <<
<type_name(association)>
>>

association_field_decl(association_end) ::= <<
private final Map\<<field_type(association_end.concept)>, <field_type(association_end.property)>\> <association_end.property.name> = new HashMap\<>();
>>

association_constructor(association) ::= ""

association_link_statement_seq(association_end) ::= <<
final <field_type(association_end.property)> <association_link_seq(association_end)> = <association_link_field(association_end)>.computeIfAbsent(<association_link_source(association_end)>, key -> new ArrayList\<>());
if (!<association_link_seq(association_end)>.contains(<association_link_target(association_end)>))
{
<indent()><association_link_seq(association_end)>.add(<association_link_target(association_end)>);
}
>>

association_link_statement_non_seq(association_end) ::= <<
<association_link_field(association_end)>.put(<association_link_source(association_end)>, <association_link_target(association_end)>);
>>

association_link_seq_suffix() ::= "List"

association_getter_name(property) ::= <<
<property.name; format="camel-case">Of
>>

association_getter_statements_seq(association_end) ::= <<
final <field_type(association_end.property)> <association_link_seq(association_end)> = <association_link_field(association_end)>.get(<association_link_source(association_end)>);

return (<association_link_seq(association_end)> == null) ? Collections.emptyList() : new ArrayList\<>(<association_link_seq(association_end)>);
>>

association_getter_statements_non_seq(association_end) ::= <<
return Optional.ofNullable(<association_link_field(association_end)>.get(<association_link_source(association_end)>));
>>

class_association_field(association) ::= <<
private static <field_type(association)> <field_name(association)>;
>>

association_setter_name(association) ::= <<
set<association_name(association)>
>>

association_setter_param(association) ::= <<
<association_name(association)> association
>>

association_setter_statements(association) ::= <<
<field_name(association)> = association;
>>

association_static_initializer_statement(association, concept) ::= <<
<association_name(association)>.init(<field_type(concept)>.class);
>>

association_one_to_many_link_method_statements(association) ::= <<
for (<type_name(association.manyProperty.type)> <field_name(association.manyProperty.type)>: <field_name(association.manyProperty)>) link(<field_name(association.oneProperty)>, <field_name(association.manyProperty.type)>);
>>

association_link_call_seq(property) ::= <<
<field_name(property.association)>.linkMany(this, <field_name(property)>);
>>

association_link_call_non_seq(property) ::= <<
<field_name(property.association)>.link(<field_name(property)>, this);
>>

association_class_getter_expr(property) ::= <<
<field_name(property.association)>.<field_name(property)>Of(this)<\\>
<if(property.type.required)><\\>
.get()<\\>
<endif>
>>

// Type

primitive_type_boolean() ::= "boolean"
primitive_type_integer() ::= "int"
primitive_type_decimal() ::= "BigDecimal"
primitive_type_string() ::= "String"
primitive_type_regex() ::= "Pattern"
primitive_type_byte() ::= "byte"
primitive_type_short() ::= "short"
primitive_type_long() ::= "long"
primitive_type_float() ::= "float"
primitive_type_double() ::= "double"
primitive_type_char() ::= "char"

type_hint_name(name) ::=<<
<class_type_name(name)>
>>

// Literal

literal_expr_string(text) ::= <<
"<text>"
>>

literal_expr_integer(text) ::= <<
<text>
>>

literal_expr_long(text) ::= <<
<text>
>>

literal_expr_short(text) ::= <<
<text>
>>

literal_expr_byte(text) ::= <<
<text>
>>

literal_expr_decimal(text) ::= <<
new BigDecimal("<text>")
>>

literal_expr_float(text) ::= <<
<text>
>>

literal_expr_double(text) ::= <<
<text>
>>

// Constants

null_value() ::= "null"

integral_zero() ::= "0"

float_zero() ::= "0.0f"

// Operations

operation_add(left, right) ::= "<left> + <right>"
operation_sub(left, right) ::= "<left> - <right>"
operation_mul(left, right) ::= "<left> * <right>"
operation_div(left, right) ::= "<left> / <right>"
operation_mod(left, right) ::= "<left> % <right>"
operation_exp(left, right) ::= "Math.pow(<left>, <right>)"

operation_eq(left, right) ::= "<left> == <right>"
operation_ineq(left, right) ::= "<left> != <right>"
operation_gt(left, right) ::= "<left> > <right>"
operation_gte(left, right) ::= "<left> >= <right>"
operation_lt(left, right) ::= "<left> \< <right>"
operation_lte(left, right) ::= "<left> \<= <right>"

operation_and(left, right) ::= "<left> && <right>"
operation_or(left, right) ::= "<left> || <right>"
operation_not(expr) ::= "!<expr>"

// Paths

path_start(path) ::= ""

path_expr(path) ::= <<
<if(path.base)><\\>
<path_base_call(path)><\\>
<else><\\>
<path_getter_call(path)><\\>
<endif>
>>

path_getter_call(path) ::= <<
get<path.name; format="pascal-case">()
>>

path_base_call(path) ::= <<
<path_expr(path.base)>
<if(path.base.type.sequence)><\\>
<indent()><path_map_call(path); anchor><\\>
<else><\\>
<indent()>.<path_getter_call(path)><\\>
<endif>
>>

path_map_call(path) ::= <<
<if(!path.base.base)><\\>
.stream()
<endif><\\>
.map(<field_name(path.base.type)> -> <field_name(path.base.type)>.<path_getter_call(path)>)
>>

path_end(path) ::= <<
<if(path.type.sequence)><\n><indent()>.collect(toList())<endif>
>>

