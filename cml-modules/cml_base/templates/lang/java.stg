
import "/lang/java/invocation.stg"
import "/lang/java/lambda.stg"
import "/lang/java/type.stg"
import "/lang/common.stg"

// Language

lang ::= [
    "fields": true
]

// Keywords

void() ::= "void"

self() ::= "this"

// Modifiers

modifier(m) ::= <<
<m><\ >
>>

abstract_keyword() ::= <<
abstract<\ >
>>

new_keyword() ::= <<
new<\ >
>>

// Blocks

block(statements) ::= <<
<\n>{<\n><indent()><statements; anchor><\n>}
>>

block_empty() ::= <<
<\ >{}
>>

// Statement

statement_terminator() ::= ";"

// Call

super_constructor_name() ::= "super"

this_constructor_name() ::= "this"

// Strings

to_string_name() ::= "toString"

to_string_expr(concept) ::= <<
new StringBuilder(<type_name(concept)>.class.getSimpleName())
<indent()><to_string_appends(concept.printableProperties); anchor>
>>

to_string_appends(properties) ::= <<
.append('(')
<to_string_fields(properties, ".append(\", \")\n")><\\>
<newLineIf(properties)><\\>
.append(')')
.toString()
>>

to_string_field(property) ::= <<
.append("<field_name(property)>=")<to_string_field_value(property)>
>>

to_string_field_value_required(property) ::= <<
.append(String.format("\"%s\"", <to_string_getter_call(property)>))
>>

to_string_field_value_optional(property) ::= <<
<if(property.type.boolean)><\\>
<to_string_field_value_required(property)><\\>
<else><\\>
.append(<to_string_getter_call(property)>.isPresent() ? String.format("\"%s\"", <to_string_getter_call(property)>) : "not present")<\\>
<endif>
>>

to_string_field_value_sequence(property) ::= <<
.append(<to_string_getter_call(property)>)
>>

to_string_getter_call(property) ::= <<
<actual_self_field()>.<getter_call(property)>
>>

// Operations

operation_keyword() ::= ""

operation_name(name) ::= <<
<name; format="camel-case">
>>

static_operation_modifier() ::= "static "

operation_header_content(instance, name, params, result_type) ::= <<
<if(result_type)><result_type><\ ><endif><\\>
<name>(<params:var_decl(); separator=", ">)
>>

var_decl(object) ::= <<
<if(object.name || object.type)><\\>
<field_type(object)> <field_name(object)><\\>
<else><\\>
<object><\\>
<endif>
>>

local_var_decl(typed_element) ::= <<
<var_decl(typed_element)>
>>

param_decl(name, type) ::= "<type> <name>"

return(expression) ::= <<
return <expression; anchor>;
>>

// Fields

field_init(named_element) ::= <<
<field_access(named_element)> = <field_name(named_element)>;
>>

field_name(named_element) ::= <<
<named_element.name; format="camel-case">
>>

field_access_prefix() ::= "this."

field_type_optional(type) ::= <<
@Nullable <type_name(type)>
>>

field_type_sequence(type) ::= <<
List\<<type_name(type)>\>
>>

field_decl(typed_element) ::= <<
private final <var_decl(typed_element)>;
>>

// Getters

getter_name(element) ::= <<
<if(element.type.boolean)><\\>
is<element.name; format="pascal-case"><\\>
<else><\\>
get<element.name; format="pascal-case"><\\>
<endif>
>>

interface_getter_annotations(property) ::= ""

class_getter_annotations(property) ::= ""

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
<if(type.boolean)><\\>
<type_name(type)><\\>
<else><\\>
Optional\<<type_name(type)>\><\\>
<endif>
>>

getter_type_sequence(type) ::= <<
List\<<boxed_type_name(type)>\>
>>

getter_field_value_required(property) ::= <<
<field_access(property)>
>>

getter_field_value_optional(property) ::= <<
Optional.ofNullable(<field_access(property)>)
>>

getter_field_value_sequence(property) ::= <<
Collections.unmodifiableList(<field_access(property)>)
>>

getter_call(property) ::= <<
<getter_name(property)>()
>>

// Interfaces

interface_keyword() ::= "interface "

// Classes

class_keyword() ::= "class "

class_type_name(name) ::= <<
<task.classTypeNamePrefix><name; format="pascal-case">
>>

constructor_name(class_name) ::= <<
<class_name; format="pascal-case">
>>

// Ancestors

ancestor_list(abstract, ancestors, interfaces) ::= <<
<if(ancestors)> extends <ancestors:type_name();separator=", "><endif><\\>
<if(interfaces)> implements <interfaces:type_name();separator=", "><endif>
>>

// Type

primitive_type_boolean() ::= "boolean"
primitive_type_integer() ::= "int"
primitive_type_decimal() ::= "BigDecimal"
primitive_type_string() ::= "String"
primitive_type_regex() ::= "Pattern"
primitive_type_byte() ::= "byte"
primitive_type_short() ::= "short"
primitive_type_long() ::= "long"
primitive_type_float() ::= "float"
primitive_type_double() ::= "double"
primitive_type_char() ::= "char"

boxed_primitive_type_boolean() ::= "Boolean"
boxed_primitive_type_integer() ::= "Integer"
boxed_primitive_type_decimal() ::= "BigDecimal"
boxed_primitive_type_string() ::= "String"
boxed_primitive_type_regex() ::= "Pattern"
boxed_primitive_type_byte() ::= "Byte"
boxed_primitive_type_short() ::= "Short"
boxed_primitive_type_long() ::= "Long"
boxed_primitive_type_float() ::= "Float"
boxed_primitive_type_double() ::= "Double"
boxed_primitive_type_char() ::= "Char"

type_hint_name(name) ::=<<
<class_type_name(name)>
>>

// Literal

literal_expr_boolean(text) ::= <<
<text>
>>

literal_expr_string(text) ::= <<
"<text>"
>>

literal_expr_integer(text) ::= <<
<text>
>>

literal_expr_long(text) ::= <<
<text>
>>

literal_expr_short(text) ::= <<
<text>
>>

literal_expr_byte(text) ::= <<
<text>
>>

literal_expr_decimal(text) ::= <<
new BigDecimal("<text>")
>>

literal_expr_float(text) ::= <<
<text>
>>

literal_expr_double(text) ::= <<
<text>
>>

// Constants

null_value() ::= "null"

integral_zero() ::= "0"

float_zero() ::= "0.0f"

// Operations

operation_add(left, right) ::= "<expression(left)> + <expression(right)>"
operation_sub(left, right) ::= "<expression(left)> - <expression(right)>"
operation_mul(left, right) ::= "<expression(left)> * <expression(right)>"
operation_div(left, right) ::= "<expression(left)> / <expression(right)>"
operation_mod(left, right) ::= "<expression(left)> % <expression(right)>"
operation_exp(left, right) ::= "Math.pow(<expression(left)>, <expression(right)>)"

operation_eq(left, right) ::= <<
<if(left.type.string || right.type.string)><\\>
Objects.equals(<expression(left)>, <expression(right)>)<\\>
<else><\\>
<expression(left)> == <expression(right)><\\>
<endif>
>>

operation_ineq(left, right) ::= "<expression(left)> != <expression(right)>"
operation_gt(left, right) ::= "<expression(left)> > <expression(right)>"
operation_gte(left, right) ::= "<expression(left)> >= <expression(right)>"
operation_lt(left, right) ::= "<expression(left)> \< <expression(right)>"
operation_lte(left, right) ::= "<expression(left)> \<= <expression(right)>"

operation_and(left, right) ::= "<expression(left)> && <expression(right)>"
operation_or(left, right) ::= "<expression(left)> || <expression(right)>"
operation_not(expr) ::= "!<expression(expr)>"

operation_ref_eq_required_required(left, right) ::= "(<expression(left)> == <expression(right)>)"
operation_ref_eq_required_optional(left, right) ::= "(<expression(right)>.isPresent() ? <expression(right)>.get() == <expression(left)> : false)"
operation_ref_eq_optional_optional(left, right) ::= "(<expression(left)>.isPresent() && <expression(right)>.isPresent() ? <expression(left)>.get() == <expression(right)>.get() : false)"

operation_not_ref_eq_required_required(left, right) ::= "(<expression(left)> != <expression(right)>)"
operation_not_ref_eq_required_optional(left, right) ::= "(<expression(right)>.isPresent() ? <expression(right)>.get() != <expression(left)> : true)"
operation_not_ref_eq_optional_optional(left, right) ::= "(<expression(left)>.isPresent() && <expression(right)>.isPresent() ? <expression(left)>.get() != <expression(right)>.get() : true)"

// Paths

path_expr(path) ::= <<
<if(path.self)><\\>
<actual_self_field()><\\>
<elseif(path.base)><\\>
<path_base_call(path)><\\>
<elseif(lambda.parameters)><\\>
<field_name(path)><\\>
<elseif(!lambda.parameters && lambda.innerExpression)><\\>
<path_getter_call({<lambda_var_name()>.}, path)><\\>
<else><\\>
<path_getter_call({<actual_self_field()>.}, path)><\\>
<endif>
>>

path_getter_call(prefix, path) ::= <<
<if(path.type.sequence)><\\>
seq(<prefix><getter_name(path)>())<\\>
<else><\\>
<prefix><getter_name(path)>()<\\>
<endif>
>>

path_base_call(path) ::= <<
<if(path.base.type.sequence || path.base.type.optional)><\\>
<if(path.base.type.optional)><\\>
seq(<path_expr(path.base)>)<\\>
<else><\\>
<path_expr(path.base)><\\>
<endif><\\>
.<path_map_call(path)><\\>
<else><\\>
<path_getter_call({<path_expr(path.base)>.}, path)><\\>
<endif>
>>

path_map_call(path) ::= <<
<if(path.base.type.required && path.type.required)><\\>
map(<field_name(path.base.type)> -> <field_name(path.base.type)>.<getter_name(path)>())<\\>
<else><\\>
flatMap(<field_name(path.base.type)> -> seq(<\\>
<if(path.originalType.required)><\\>
asList(<field_name(path.base.type)>.<getter_name(path)>())<\\>
<else><\\>
<field_name(path.base.type)>.<getter_name(path)>()<\\>
<endif><\\>
))<\\>
<endif><\\>
<if(!path.base.base && path.type.optional)>.findFirst()<if(path.type.boolean)>.orElse(false)<endif><endif>
>>

to_list(expr) ::= <<
<expr>.toList()
>>
