
import "/lang/py/expression.stg"
import "/lang/py/invocation.stg"
import "/lang/py/lambda.stg"
import "/lang/py/type.stg"
import "/lang/common.stg"

// Language

lang ::= [
    "fields": false
]

// Keywords

void() ::= "None"

self() ::= "self"

// Blocks

block(statements) ::= <<
<\n><indent()><statements; anchor>
>>

block_empty() ::= <<
<\n><indent()>pass
>>

block_header_terminator() ::= ":"

// Call

super_constructor_name() ::= "super().__init__"

// Strings

to_string_name() ::= "__str__"

to_string_expr(concept) ::= <<
"%s(<\\>
<if(concept.printableProperties)><\\>
<concept.printableProperties:{p|<getter_call(p)>=%s}; separator=", ">)" % (
<indent()><to_string_expr_params(concept); anchor>
)<\\>
<else><\\>
)" % type(self).__name__<\\>
<endif>
>>

to_string_expr_params(concept) ::= <<
type(self).__name__,
<to_string_fields(concept.printableProperties, ",\n")>
>>

to_string_field(property) ::= <<
<actual_self_field()>.<getter_call(property)>
>>

// Operations

operation_keyword() ::= "def "

operation_name(name) ::= <<
<name; format="underscore-case">
>>

static_operation_modifier() ::= "@staticmethod<\n>"

operation_header_content(instance, name, params, result_type) ::= <<
<name>(<\\>
<if(instance)>self<endif><\\>
<commaIf2(instance, params)><\\>
<params:var_decl(); separator=", ">)<\\>
<\ >-><\ >'<if(result_type)><result_type><else>None<endif>'
>>

var_decl(object) ::= <<
<if(object.name || object.type)><\\>
<param_decl(field_name(object), field_type(object))><\\>
<if(object.value)><\\>
<\ >=<\ ><literal_expr(object.value)><\\>
<endif><\\>
<else><\\>
<object><\\>
<endif>
>>

local_var_decl(typed_element) ::= <<
<field_name(typed_element)>
>>

param_decl(name, type) ::= "<name>: '<type>'"

return(expression) ::= <<
return <expression>
>>

// Fields

field_init(named_element) ::= <<
<field_access(named_element)> = <field_name(named_element)>
>>

field_name(named_element) ::= <<
<named_element.name; format="underscore-case">
>>

field_access_prefix() ::= "self.__"

field_type_optional(type) ::= <<
Optional[<type_name(type)>]
>>

field_type_sequence(type) ::= <<
List[<type_name(type)>]
>>

field_decl(typed_element) ::= ""

// Getters

getter_name(property) ::= <<
<property.name; format="underscore-case">
>>

interface_getter_annotations(property) ::= <<
@abstractproperty<\n>
>>

class_getter_annotations(property) ::= <<
@property<\n>
>>

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
<if(type.boolean)><\\>
<type_name(type)><\\>
<else><\\>
Optional[<type_name(type)>]<\\>
<endif>
>>

getter_type_sequence(type) ::= <<
List[<type_name(type)>]
>>

getter_field_value_required(property) ::= <<
<field_access(property)>
>>

getter_field_value_optional(property) ::= <<
<field_access(property)>
>>

getter_field_value_sequence(property) ::= <<
<field_access(property)>
>>

getter_call(property) ::= <<
<property.name; format="underscore-case">
>>

// Structure

structure_preamble() ::= "<\n>"

// Interfaces

interface_keyword() ::= "class "

interface_ancestor_header(ancestors, ancestor_list) ::= <<
<\ >(ABC<if(ancestors)>, <ancestor_list><endif>)
>>

interface_operation_body() ::= <<
<block_empty()>
>>

// Classes

class_keyword() ::= "class "

class_type_name(name) ::= <<
<task.classTypeNamePrefix><name; format="pascal-case">
>>

constructor_name(class_name) ::= "__init__"

class_static_initializer(concept) ::= ""

// Ancestors

ancestor_list(abstract, ancestors, interfaces) ::= <<
<if(abstract || ancestors || interfaces)>(<endif><\\>
<if(ancestors)><\\>
<ancestors:type_name();separator=", "><\\>
<if(interfaces)>, <endif><\\>
<endif><\\>
<if(interfaces)><interfaces:type_name();separator=", "><endif><\\>
<if(abstract)><if(ancestors || interfaces)>, <endif>ABC<endif><\\>
<if(abstract || ancestors || interfaces)>)<endif>
>>

// Type

primitive_type_boolean() ::= "bool"
primitive_type_integer() ::= "int"
primitive_type_decimal() ::= "Decimal"
primitive_type_string() ::= "str"
primitive_type_regex() ::= "Pattern"
primitive_type_byte() ::= "int"
primitive_type_short() ::= "int"
primitive_type_long() ::= "int"
primitive_type_float() ::= "float"
primitive_type_double() ::= "float"
primitive_type_char() ::= "int"

type_hint_name(name) ::=<<
'<class_type_name(name)>'
>>

// Literal

literal_expr_boolean(text) ::= <<
<text; format="pascal-case">
>>

literal_expr_string(text) ::= <<
"<text>"
>>

literal_expr_integer(text) ::= <<
<text>
>>

literal_expr_long(text) ::= <<
<text>
>>

literal_expr_short(text) ::= <<
<text>
>>

literal_expr_byte(text) ::= <<
<text>
>>

literal_expr_decimal(text) ::= <<
Decimal("<text>")
>>

literal_expr_float(text) ::= <<
<text>
>>

literal_expr_double(text) ::= <<
<text>
>>

// Constants

null_value() ::= "None"

integral_zero() ::= "0"

float_zero() ::= "0"

boolean_false() ::= "False"

// Operations

operation_add(left, right) ::= "<expression(left)> + <expression(right)>"
operation_sub(left, right) ::= "<expression(left)> - <expression(right)>"
operation_mul(left, right) ::= "<expression(left)> * <expression(right)>"
operation_div(left, right) ::= "<expression(left)> / <expression(right)>"
operation_mod(left, right) ::= "<expression(left)> % <expression(right)>"
operation_exp(left, right) ::= "<expression(left)> ** <expression(right)>"

operation_str_concat(left, right) ::= <<
<nullable_expr(left)> + <nullable_expr(right)>
>>

operation_eq(left, right) ::= "<expression(left)> == <expression(right)>"
operation_ineq(left, right) ::= "<expression(left)> != <expression(right)>"
operation_gt(left, right) ::= "<expression(left)> > <expression(right)>"
operation_gte(left, right) ::= "<expression(left)> >= <expression(right)>"
operation_lt(left, right) ::= "<expression(left)> \< <expression(right)>"
operation_lte(left, right) ::= "<expression(left)> \<= <expression(right)>"

operation_and(left, right) ::= "<expression(left)> and <expression(right)>"
operation_or(left, right) ::= "<expression(left)> or <expression(right)>"
operation_not(expr) ::= "not <expression(expr)>"

operation_ref_eq_required_required(left, right) ::= "<expression(left)> == <expression(right)>"
operation_not_ref_eq_required_required(left, right) ::= "<expression(left)> != <expression(right)>"

// Paths

path_expr(path) ::= <<
<if(path.none)><\\>
None<\\>
<elseif(path.self)><\\>
<actual_self_field()><\\>
<elseif(path.base)><\\>
<path_base_call(path)><\\>
<elseif(lambda.parameters)><\\>
<field_name(path)><\\>
<elseif(!lambda.parameters && lambda.innerExpression)><\\>
item.<path_property(path)><\\>
<else><\\>
<path_getter_call(path)><\\>
<endif>
>>

path_getter_call(path) ::= <<
<actual_self_field()>.<path_property(path)>
>>

path_base_call(path) ::= <<
<if(path.base.type.sequence)><\\>
<path_map_call(path); anchor><\\>
<elseif(path.base.type.optional && path.type.boolean)><\\>
False if <path_expr(path.base)> is None else <path_expr(path.base)>.<path_property(path)><\\>
<else><\\>
<path_expr(path.base)>.<path_property(path)><\\>
<endif>
>>

path_map_call(path) ::= <<
<if(path.originalType.sequence)>itertools.chain.from_iterable(<endif><\\>
map(
<indent()>lambda <field_name(path.base.type)>: <field_name(path.base.type)>.<path_property(path)>,
<indent()><path_expr(path.base)>
)<\\>
<if(path.originalType.sequence)>)<endif>
>>

path_property(path) ::= <<
<path.name; format="underscore-case">
>>

to_list(expr) ::= <<
list(<\n><indent()><expr><\n>)
>>

expression_conditional(expr) ::= <<
(<expression(expr.then)> if <expression(expr.cond)> else <expression(expr.else_)>)
>>

