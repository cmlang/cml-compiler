
invocation_sequence_empty(args) ::= <<
(len(<expression(args.seq)>) == 0)
>>

invocation_optional_empty(args) ::= <<
(<expression(args.seq)> is None)
>>

invocation_required_empty(args) ::= <<
<invocation_optional_empty(args)>
>>

invocation_sequence_present(args) ::= <<
(len(<expression(args.seq)>) > 0)
>>

invocation_optional_present(args) ::= <<
(<expression(args.seq)> is not None)
>>

invocation_required_present(args) ::= <<
<invocation_optional_present(args)>
>>

invocation_sequence_first(args) ::= <<
((<expression(args.seq)>) or [None])[0]
>>

invocation_optional_first(args) ::= <<
<expression(args.seq)>
>>

invocation_required_first(args) ::= <<
<expression(args.seq)>
>>

invocation_sequence_last(args) ::= <<
((<expression(args.seq)>) or [None])[-1]
>>

invocation_optional_last(args) ::= <<
<expression(args.seq)>
>>

invocation_required_last(args) ::= <<
<expression(args.seq)>
>>

invocation_sequence_exists(args) ::= <<
any(map(<expression(args.expr)>, <expression(args.seq)>))
>>

invocation_optional_exists(args) ::= <<
any(map(<expression(args.expr)>, [] if <expression(args.seq)> is None else [<expression(args.seq)>]))
>>

invocation_required_exists(args) ::= <<
any(map(<expression(args.expr)>, [<expression(args.seq)>]))
>>

invocation_sequence_all(args) ::= <<
all(map(<expression(args.expr)>, <expression(args.seq)>))
>>

invocation_optional_all(args) ::= <<
all(map(<expression(args.expr)>, [] if <expression(args.seq)> is None else [<expression(args.seq)>]))
>>

invocation_required_all(args) ::= <<
all(map(<expression(args.expr)>, [<expression(args.seq)>]))
>>
