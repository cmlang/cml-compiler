
invocation_concept_arg(arg) ::= <<
<expression(arg)>
>>

invocation_sequence_empty(args) ::= <<
(len(<expression(args.seq)>) == 0)
>>

invocation_optional_empty(args) ::= <<
(<expression(args.seq)> is None)
>>

invocation_required_empty(args) ::= <<
<invocation_optional_empty(args)>
>>

invocation_sequence_present(args) ::= <<
(len(<expression(args.seq)>) > 0)
>>

invocation_optional_present(args) ::= <<
(<expression(args.seq)> is not None)
>>

invocation_required_present(args) ::= <<
<invocation_optional_present(args)>
>>

invocation_sequence_first(args) ::= <<
(list(<expression(args.seq)>) or [None])[0]
>>

invocation_optional_first(args) ::= <<
<expression(args.seq)>
>>

invocation_required_first(args) ::= <<
<expression(args.seq)>
>>

invocation_sequence_last(args) ::= <<
((<expression(args.seq)>) or [None])[-1]
>>

invocation_optional_last(args) ::= <<
<expression(args.seq)>
>>

invocation_required_last(args) ::= <<
<expression(args.seq)>
>>

invocation_sequence_exists(args) ::= <<
any(map(<expression(args.expr)>, <expression(args.seq)>))
>>

invocation_optional_exists(args) ::= <<
any(map(<expression(args.expr)>, <optional_list(args)>))
>>

invocation_required_exists(args) ::= <<
any(map(<expression(args.expr)>, [<expression(args.seq)>]))
>>

invocation_sequence_all(args) ::= <<
all(map(<expression(args.expr)>, <expression(args.seq)>))
>>

invocation_optional_all(args) ::= <<
all(map(<expression(args.expr)>, <optional_list(args)>))
>>

invocation_required_all(args) ::= <<
all(map(<expression(args.expr)>, [<expression(args.seq)>]))
>>

invocation_sequence_select(args) ::= <<
filter(<expression(args.expr)>, <expression(args.seq)>)
>>

invocation_optional_select(args) ::= <<
filter(<expression(args.expr)>, <optional_list(args)>)
>>

invocation_required_select(args) ::= <<
filter(<expression(args.expr)>, [<expression(args.seq)>])
>>

invocation_sequence_reject(args) ::= <<
itertools.filterfalse(<expression(args.expr)>, <expression(args.seq)>)
>>

invocation_optional_reject(args) ::= <<
itertools.filterfalse(<expression(args.expr)>, <optional_list(args)>)
>>

invocation_required_reject(args) ::= <<
itertools.filterfalse(<expression(args.expr)>, [<expression(args.seq)>])
>>

invocation_sequence_collect(args) ::= <<
map(<expression(args.expr)>, <expression(args.seq)>)
>>

invocation_optional_collect(args) ::= <<
map(<expression(args.expr)>, <optional_list(args)>)
>>

invocation_required_collect(args) ::= <<
map(<expression(args.expr)>, [<expression(args.seq)>])
>>

optional_list(args) ::= <<
[] if <expression(args.seq)> is None else [<expression(args.seq)>]
>>

invocation_sequence_sort(args) ::= <<
sorted(<expression(args.seq)>, key=functools.cmp_to_key(<expression(args.expr)>))
>>

invocation_compare(args) ::= <<
-1 if (<expression(args.expr1)> \< <expression(args.expr2)>) else +1 if (<expression(args.expr2)> \< <expression(args.expr1)>) else 0
>>

invocation_sequence_reverse(args) ::= <<
reversed(<expression(args.seq)>)
>>

invocation_concat(args) ::= <<
(<expression(args.seq1)> + <expression(args.seq2)>)
>>