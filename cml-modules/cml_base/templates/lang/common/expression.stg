
expression(expr) ::= <<
<({expression_<expr.kind>})(expr)>
>>

expression_path(path) ::= <<
<if(path.self)><\\>
<self()><\\>
<else><\\>
<path_expr(path)><\\>
<endif>
>>

expression_unary(expr) ::= <<
<if(expr.operation)><\\>
(<({operation_<expr.operation>})(expression(expr.subExpr))>)<\\>
<else><\\>
<expression_operator(expr)> <expression(expr.subExpr)>
<endif>
>>

expression_infix(expr) ::= <<
<if(expr.operation)><\\>
(<({operation_<expr.operation>})(expression(expr.left), expression(expr.right))>)<\\>
<else><\\>
(<expression(expr.left)> <expr.operator> <expression(expr.right)>)<\\>
<endif>
>>

expression_literal(literal) ::= <<
<({literal_expr_<literal.type.name; format="lower-case">})(literal.text)>
>>

expression_invocation(invocation) ::= <<
<if(invocation.namedArguments.seq)><\\>
<({invocation_<invocation.namedArguments.seq.type.kind>_<invocation.name>})(invocation.namedArguments)><\\>
<else>
<({invocation_<invocation.name>})(invocation.namedArguments)>
<endif>
>>

expression_type_check(type_check) ::= <<
<({type_check_<type_check.operator>})(type_check.expr, type_check.checkedType)>
>>

expression_type_cast(type_cast) ::= <<
<({type_cast_<type_cast.operator>})(type_cast.expr, type_cast.castType)>
>>
