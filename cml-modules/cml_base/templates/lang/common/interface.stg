
import "/lang/common/generic.stg"
import "/lang/common/operation.stg"
import "/lang/common/getter.stg"
import "/lang/common/call.stg"

interface(concept, class_name_suffix) ::= <<
<structure(
    keyword="interface",
    header=interface_header(concept),
    base_list=concept.allProperties,
    sections = [
        interface_getters(concept),
        interface_secondary_create_method(concept),
        interface_primary_create_method(concept),
        interface_extend_method()
    ]
)>
>>

interface_header(concept) ::= <<
<type_name(concept)><ancestor_list(true, concept.ancestors, [])>
>>

interface_getters(concept) ::= <<
<concept.properties:interface_getter();separator="\n\n">
>>

interface_secondary_create_method(concept) ::= ""

interface_primary_create_method(concept) ::= <<
<if(!concept.abstraction && class_name_suffix)><\\>
<static_operation(
    name=interface_create_name(interface_name()),
    params=[concept.superProperties, concept.nonDerivedProperties],
    result_type=interface_name(),
    type_params=[],
   statements=interface_primary_create_method_statements(concept)
)><\\>
<endif>
>>

interface_primary_create_method_statements(concept) ::= ""

interface_extend_method() ::= <<
<if(class_name_suffix)><\\>
<interface_extend_method_with_params_args(
    [actual_self_decl(concept), concept.allAncestors, concept.nonDerivedProperties],
    [actual_self(), concept.allAncestors, concept.nonDerivedProperties]
)><\\>
<endif>
>>

interface_extend_method_with_params_args(params, args) ::= <<
<static_operation(
    name=interface_extend_name(interface_name()),
    params=params,
    result_type=interface_name(),
    type_params=[],
    statements=return(new_call(interface_impl_name(), args))
)>
>>

interface_create_name(name) ::= <<
<operation_name(({create<name>}))>
>>

interface_extend_name(name) ::= <<
<operation_name(({extend<name>}))>
>>

interface_getter(property) ::= <<
<interface_getter_annotations(property)><\\>
<interface_operation(
    name=getter_name(property),
    params=[],
    result_type=getter_type(property.type)
)>
>>

interface_operation(name, params, result_type) ::= <<
<instance_operation_header(name, params, result_type)><\\>
<statement_terminator()><\\>
<interface_operation_body()>
>>

interface_operation_body() ::= ""

interface_name() ::= <<
<type_name(concept)>
>>

interface_impl_name() ::= <<
<type_name(concept)><class_name_suffix>
>>