
import "/lang/common/generic.stg"
import "/lang/common/getter.stg"
import "/lang/common/to_string.stg"

class(concept) ::= <<
<class7(
    concept=concept,
    class_name_suffix="",
    abstract=concept.abstract,
    ancestors=concept.directAncestors,
    interfaces=[],
    field_ancestors=[],
    delegated_properties=[],
    super_properties=concept.inheritedProperties
)>
>>

class2(concept, class_name_suffix) ::= <<
<class7(
    concept=concept,
    class_name_suffix=class_name_suffix,
    abstract=false,
    ancestors=[],
    interfaces=[concept],
    field_ancestors=concept.allAncestors,
    delegated_properties=concept.inheritedProperties,
    super_properties=[]
)>
>>

class7(
    concept, class_name_suffix,
    abstract,
    ancestors, interfaces,
    field_ancestors,
    delegated_properties, super_properties
) ::= <<
<class_abstract()><\\>
<structure(
    keyword="class",
    header=class_header(),
    base_list=true,
    sections = [
        class_fields(),
        class_secondary_constructor(concept.nonInitProperties, field_ancestors),
        class_primary_constructor(super_properties, concept.properties, field_ancestors),
        class_getters(),
        class_to_string()
    ]
)>
>>

class_abstract() ::= <<
<if(concept.abstract && super_properties)><abstract_keyword()><endif>
>>

class_header() ::= <<
<type_name(concept)><class_name_suffix><ancestor_list(abstract, ancestors, interfaces)>
>>

class_fields() ::= <<
<ancestor_fields(field_ancestors)><\\>
<emptyLineIf2(field_ancestors, concept.properties)><\\>
<property_fields(concept.properties)>
>>

class_getters() ::= <<
<line_list([
    field_getters(concept.properties),
    delegated_getters(delegated_properties)
])>
>>

ancestor_fields(ancestors) ::= <<
<ancestors:field_decl();separator="\n">
>>

property_fields(properties) ::= <<
<properties:field_decl();separator="\n">
>>

field_getters(properties) ::= <<
<properties:class_getter();separator="\n\n">
>>

delegated_getters(properties) ::= <<
<properties:delegate_getter();separator="\n\n">
>>

class_primary_constructor(super_properties, properties, ancestors) ::= <<
<if(ancestors || properties)><\\>
<modifier("public")><\\>
<class_constructor([ancestors, super_properties, properties], class_primary_constructor_statements())><\\>
<endif>
>>

class_primary_constructor_statements() ::= <<
<super_constructor(super_properties)><\\>
<if(super_properties)><\\>
<properties:field_init();separator="\n"><\\>
<else><\\>
<[ancestors, properties]:field_init();separator="\n"><\\>
<endif>
>>

super_constructor(inherited_properties) ::= <<
<if(inherited_properties)><\\>
<super_constructor_call(inherited_properties)>
<endif>
>>

class_secondary_constructor(non_init_properties, ancestors) ::= <<
<if(!ancestors && concept.initProperties)><\\>
<modifier("public")><\\>
<class_constructor(non_init_properties, class_secondary_constructor_statements())><\\>
<endif>
>>

class_secondary_constructor_statements() ::= <<
<this_constructor_call(concept.allProperties)>
>>

class_to_string() ::= <<
<to_string(concept)>
>>

class_constructor(params, statements) ::= <<
<instance_operation(
    name=constructor_name(class_name()),
    params=params,
    result_type=[],
    statements=statements
)>
>>

class_getter(property) ::= <<
<class_getter_annotations(property)><\\>
<modifier("public")><\\>
<instance_operation(
    name=getter_name(property),
    params=[],
    result_type=getter_type(property.type),
    statements=return(getter_field_value(property))
)>
>>

delegate_getter(property) ::= <<
<class_getter_annotations(property)><\\>
<modifier("public")><\\>
<instance_operation(
    name={<getter_name(property)>},
    params=[],
    result_type=getter_type(property.type),
    statements=return({<field_access(property.parentScope)>.<getter_call(property)>})
)>
>>

class_name() ::= <<
<concept.name><class_name_suffix>
>>
