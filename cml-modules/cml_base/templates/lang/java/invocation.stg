
invocation_sequence_empty(args) ::= <<
<expression(args.seq)>.isEmpty()
>>

invocation_optional_empty(args) ::= <<
!<expression(args.seq)>.isPresent()
>>

invocation_required_empty(args) ::= <<
<expression(args.seq)> == null
>>

invocation_sequence_present(args) ::= <<
!<expression(args.seq)>.isEmpty()
>>

invocation_optional_present(args) ::= <<
<expression(args.seq)>.isPresent()
>>

invocation_required_present(args) ::= <<
<expression(args.seq)> != null
>>

invocation_sequence_first(args) ::= <<
<expression(args.seq)>.findFirst()
>>

invocation_optional_first(args) ::= <<
seq(<expression(args.seq)>).findFirst()
>>

invocation_required_first(args) ::= <<
seq(asList(<expression(args.seq)>)).findFirst()
>>

invocation_sequence_last(args) ::= <<
<expression(args.seq)>.findLast()
>>

invocation_optional_last(args) ::= <<
seq(<expression(args.seq)>).findLast()
>>

invocation_required_last(args) ::= <<
seq(asList(<expression(args.seq)>)).findLast()
>>

invocation_sequence_exists(args) ::= <<
<expression(args.seq)>.anyMatch(<expression(args.expr)>)
>>

invocation_optional_exists(args) ::= <<
seq(<expression(args.seq)>).anyMatch(<expression(args.expr)>)
>>

invocation_required_exists(args) ::= <<
seq(asList(<expression(args.seq)>)).anyMatch(<expression(args.expr)>)
>>

invocation_sequence_all(args) ::= <<
<expression(args.seq)>.allMatch(<expression(args.expr)>)
>>

invocation_optional_all(args) ::= <<
seq(<expression(args.seq)>).allMatch(<expression(args.expr)>)
>>

invocation_required_all(args) ::= <<
seq(asList(<expression(args.seq)>)).allMatch(<expression(args.expr)>)
>>

invocation_sequence_select(args) ::= <<
<expression(args.seq)>.filter(<expression(args.expr)>)
>>

invocation_optional_select(args) ::= <<
seq(<expression(args.seq)>).filter(<expression(args.expr)>)
>>

invocation_required_select(args) ::= <<
seq(asList(<expression(args.seq)>)).filter(<expression(args.expr)>)
>>

invocation_sequence_reject(args) ::= <<
<expression(args.seq)>.removeAll(<expression(args.seq)>.filter(<expression(args.expr)>))
>>

invocation_optional_reject(args) ::= <<
seq(<expression(args.seq)>).removeAll(seq(<expression(args.seq)>).filter(<expression(args.expr)>))
>>

invocation_required_reject(args) ::= <<
seq(asList(<expression(args.seq)>)).removeAll(seq(asList(<expression(args.seq)>)).filter(<expression(args.expr)>))
>>
