
nullable_expr(expr) ::= <<
<if(expr.type.nothing)><\\>
<null_value()><\\>
<elseif(expr.type.optional)><\\>
<expression(expr)>.orElse(<field_default_value(expr.type)>)<\\>
<else><\\>
<expression(expr)><\\>
<endif>
>>

expression_required_to_required(arg) ::= <<
<expression(arg)>
>>

expression_required_to_optional(arg) ::= <<
Optional.of(<expression(arg)>)
>>

expression_required_to_sequence(arg) ::= <<
Seq.of(<expression(arg)>).toList()
>>

expression_optional_to_optional(arg) ::= <<
<expression(arg)>
>>

expression_optional_to_sequence(arg) ::= <<
seq(<expression(arg)>).toList()
>>

expression_sequence_to_sequence(arg) ::= <<
seq(<expression(arg)>).toList()
>>

expression_let(let) ::= <<
<expression_let_("", let)>
>>

expression_let_(field_access_prefix, let) ::= <<
new Supplier\<<boxed_type_name(let.type)>\>() {
<indent()>public <boxed_type_name(let.type)> get()
<indent()>{
<indent()><indent()>final <field_type(let.variableExpr)> <let.variable; format="camel-case"> = <expression(let.variableExpr)>;
<indent()><indent()><return(expression(let.resultExpr))>
<indent()>}
}.get()
>>



