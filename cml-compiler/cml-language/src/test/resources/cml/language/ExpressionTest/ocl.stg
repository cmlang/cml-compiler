
ocl(expr) ::= <<
<({<expr.kind>_expr})(expr)>
>>

query_expr(query) ::= <<
<if(query.transform.suffix)><\\>
<({<query.transform.operation>_<query.transform.suffix>_suffix})(query_body(query))><\\>
<else><\\>
<query_body(query)><\\>
<endif>
>>

query_body(query) ::= <<
(<ocl(query.base)> -> <transform_decl(query.transform)>)
>>

transform_decl(transform) ::= <<
<({<transform.operation>_operation})(transform)>
>>

select_operation(transform) ::= <<
select(<ocl(transform.expr)>)
>>

reject_operation(transform) ::= <<
reject(<ocl(transform.expr)>)
>>

yield_operation(transform) ::= <<
collect(<ocl(transform.expr)>)
>>

yield_unique_suffix(body) ::= <<
(<body>->asSet())
>>

path_expr(path) ::= <<
<path.names; separator=".">
>>

unary_expr(unary) ::= <<
(<expr_operator(unary)> <ocl(unary.expr)>)
>>

infix_expr(infix) ::= <<
(<ocl(infix.left)> <expr_operator(infix)> <ocl(infix.right)>)
>>

expr_operator(expr) ::= <<
<if(expr.operation)><\\>
<({operator_<expr.operation>})()><\\>
<else><\\>
<expr.operator><\\>
<endif>
>>

operator_add() ::= "+"
operator_sub() ::= "-"
operator_mul() ::= "*"
operator_div() ::= "/"
operator_mod() ::= "%"
operator_exp() ::= "^"

operator_eq() ::= "="
operator_ineq() ::= "\<>"
operator_gt() ::= ">"
operator_gte() ::= ">="
operator_lt() ::= "\<"
operator_lte() ::= "\<="

operator_and() ::= "and"
operator_or() ::= "or"
operator_xor() ::= "xor"
operator_implies() ::= "implies"
operator_not() ::= "not"

conditional_expr(conditional) ::= <<
(if <ocl(conditional.cond)> then <ocl(conditional.then)> else <ocl(conditional.else_)> endif)
>>

literal_expr(literal) ::= <<
<({literal_expr_<literal.type.name>})(literal.text)>
>>

literal_expr_Boolean(text) ::= <<
<text>
>>

literal_expr_String(text) ::= <<
"<text>"
>>

literal_expr_Integer(text) ::= <<
<text>
>>

literal_expr_Decimal(text) ::= <<
<text>
>>