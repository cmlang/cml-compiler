
ocl(expr) ::= <<
<({<expr.kind>_expr})(expr)>
>>

unary_expr(unary) ::= <<
(<unary.operator> <ocl(unary.expr)>)
>>

infix_expr(infix) ::= <<
(<ocl(infix.left)> <infix.operator> <ocl(infix.right)>)
>>

literal_expr(literal) ::= <<
<({literal_expr_<literal.type.name>})(literal.text)>
>>

literal_expr_Boolean(text) ::= <<
<text>
>>

literal_expr_String(text) ::= <<
"<text>"
>>

literal_expr_Integer(text) ::= <<
<text>
>>

literal_expr_Decimal(text) ::= <<
<text>
>>