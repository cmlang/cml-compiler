
ocl(expr) ::= <<
<({<expr.kind>_ocl})(expr)>
>>

invocation_ocl(invocation) ::= <<
<({<invocation.name>})(invocation.namedArguments)>
>>

lambda_ocl(lambda) ::= <<
<if(lambda.parameters)><lambda.parameters; separator=", "> | <endif><\\>
<ocl(lambda.innerExpression)>
>>

exists(args) ::= <<
<collection_invocation(args, "exists", "")>
>>

select(args) ::= <<
<collection_invocation(args, "select", "")>
>>

reject(args) ::= <<
<collection_invocation(args, "reject", "")>
>>

yield(args) ::= <<
<collection_invocation(args, "collect", "->flatten()")>
>>

recurse(args) ::= <<
<collection_invocation(args, "closure", "->flatten()")>
>>

reduce(args) ::= <<
<ocl(args.seq)>->iterate(<args.expr.parameters; separator="; "> = <args.from.innerExpression> | <ocl(args.expr.innerExpression)>)
>>

distinct(args) ::= <<
<ocl(args.seq)>->asSet()
>>

flatten(expr) ::= <<
(<expr> -> flatten())
>>

cross_join(args) ::= <<
cross_join(<args.seq1>, <args.seq2>)
>>

collection_invocation(args, operation, appendix) ::= <<
<ocl(args.seq)>-><operation>(<ocl(args.expr)>)<appendix>
>>

path_ocl(path) ::= <<
<path.names; separator=".">
>>

unary_ocl(unary) ::= <<
(<expr_operator(unary)> <ocl(unary.expr)>)
>>

infix_ocl(infix) ::= <<
(<ocl(infix.left)> <expr_operator(infix)> <ocl(infix.right)>)
>>

expr_operator(expr) ::= <<
<if(expr.operation)><\\>
<({operator_<expr.operation>})()><\\>
<else><\\>
<expr.operator><\\>
<endif>
>>

operator_add() ::= "+"
operator_sub() ::= "-"
operator_mul() ::= "*"
operator_div() ::= "/"
operator_mod() ::= "%"
operator_exp() ::= "^"

operator_eq() ::= "="
operator_ineq() ::= "\<>"
operator_gt() ::= ">"
operator_gte() ::= ">="
operator_lt() ::= "\<"
operator_lte() ::= "\<="

operator_and() ::= "and"
operator_or() ::= "or"
operator_xor() ::= "xor"
operator_implies() ::= "implies"
operator_not() ::= "not"

conditional_ocl(conditional) ::= <<
(if <ocl(conditional.cond)> then <ocl(conditional.then)> else <ocl(conditional.else_)> endif)
>>

literal_ocl(literal) ::= <<
<({literal_<literal.type.name>})(literal.text)>
>>

literal_Boolean(text) ::= <<
<text>
>>

literal_String(text) ::= <<
"<text>"
>>

literal_Integer(text) ::= <<
<text>
>>

literal_Decimal(text) ::= <<
<text>
>>

literal_Float(text) ::= <<
<text>f
>>

literal_Double(text) ::= <<
<text>d
>>

