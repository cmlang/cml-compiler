
concept Expressions
{
    // Unary operators:
    plus = +1;
    minus = -2;

    // Arithmetic Operators:
    addition = 1 + 2;
    subtraction = 2 - 1;
    multiplication = 2 * 3;
    division = 6 / 2;
    modulus = 5 % 2;

    // Left Associative:
    addition_left_assoc = 1 + 2 + 3;
    subtraction_left_assoc = 3 - 2 - 1;
    multiplication_left_assoc = 2 * 3 * 1;
    division_left_assoc = 12 / 6 / 2;

    unary_before_infix = +1 * -2 + -3 / +4;
    unary_before_infix2 = 1 * -2 - -3 / +4;
    unary_before_infix3 = 1 - -2 * -3 + +4;

    // Precedence of multiplication and division over addition:
    multiplication_before_addition = 1 + 2 * 3;
    division_before_addition = 1 + 2 / 3;

    // Precedence of multiplication and division over subtraction:
    division_before_subtraction = 3 - 1 / 2;
    multiplication_before_subtraction = 3 - 1 * 2;

    // Same precedence for multiplication and division:
    multiplication_division_left_assoc = 3 * 4 / 2;
    division_multiplication_left_assoc = 3 / 4 * 2;

    // Same precedence for addition and subtraction:
    addition_subtraction_left_assoc = 3 - 4 + 2;
    subtraction_addition_left_assoc = 3 + 4 - 2;

    // Exponentiation:
    exponentiation = 2 ^ 3;
    exponentiation_right_assoc = 2 ^ 3 ^ 4;
    exponentiation_precedence = 2^3+3^4*4^5^6;

    // Relational Operators:
    equality = 3 == 3;
    inequality = 2 != 3;
    less_than = 2 < 3;
    less_or_equal_than = 2 <= 3;
    greater_than = 3 > 2;
    greater_or_equal_than = 3 >= 2;
    relational_left_to_right = 3 == 3 <= 4 < 5 >= 4 > 3 != 3;
    relational_precedence = 3*5 > 4/6 >= 3-1 < 1+1 <= 3^1 != 1;
}