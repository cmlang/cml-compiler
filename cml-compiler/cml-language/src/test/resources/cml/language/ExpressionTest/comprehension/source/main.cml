
@template @function select<T>(seq: T*, expr: (T) -> BOOLEAN) -> T*;

@template @function reject<T>(seq: T*, expr: (T) -> BOOLEAN) -> T*;

@template @function yield<T>(seq: T*, expr: (T) -> R*) -> R*;

@template @function distinct<T>(seq: T*) -> T*;

@template @function exists<T>(seq: T*, expr: (T) -> BOOLEAN) -> BOOLEAN;

@template @function recurse<T,S>(seq: T*, expr: (T) -> S*) -> S*;

@template @function reduce<T,S>(seq: T*, expr: (T, S) -> S, from: () -> S) -> S;

@template @function cross_join<T,S>(seq1: T*, seq2: S*) -> (T, S)*;

@concept Expressions
{
    top_items: Item*;
    class: Class;
    children: Class*;
    top_orders: Order*;
    gold_customers: Customer*;

    path_ancestors = class.ancestors;

    select_query = top_items | select: name == "this";
    select_query_nested = top_items | select: name == "this" | select: qty > 10;
    select_query_nested_nested = top_items | select: name == "this" | select: qty > 10 | select: number <= 10;

    select_query_embedded = top_orders | select: (items | exists: qty > 10) | select: total > 100;

    select_invocation_nested = select(top_items | select: name == "this",  { qty > 10 });
    select_invocation_nested_nested = select(select(top_items | select: name == "this",  { qty > 10 }), { number <= 10 });
    select_invocation_intermediate = top_orders | select: exists(items, { qty > 10 }) | select: total > 100;

    reject_query = top_items | reject: name == "this";

    yield_query = top_orders | yield: items;
    yield_query_unique = top_orders | yield: items.product | distinct;

    recurse_ancestors = class | recurse: ancestors;
    recurse_unique = class | recurse: ancestors | distinct;
    recurse_children = children | recurse: children | select: ranking > 10; // equivalent to: self | recurse children | ...
    recurse_self = self | recurse: children | select: ranking > 10;

    reduce_query = top_orders | reduce: order, sum -> sum + order.total from: 0;
    reduce_enumeration = for order in top_orders | reduce: sum -> sum + order.total from: 0;

    enumeration = for order in top_orders | select: order.total > 100;
    enumeration_yield = for order in top_orders | yield: order.items;
    enumeration_select = for order in top_orders | select: order.total > 1000 | yield: order.items;

    enumeration_embedded = select(for order in top_orders | yield: order, { total > 100 });
    enumeration_embedded_select = yield(for order in top_orders | select: order.total > 100, { items });


    cross_join_enumeration = for order in top_orders, gold_customer in gold_customers
                                | select: order.customer === gold_customer
                                | yield: order;
    cross_join_nested = yield(for order in top_orders, gold_customer in gold_customers
                                  | select: order.customer === gold_customer and order.total > 1000,
                              { order, gold_customer -> order.customer.name });
}

@concept Order
{
    customer: Customer;
    items: Item*;
    total: DECIMAL;
}

@concept Item
{
    number: INTEGER;
    name: STRING;
    product: Product;
    qty: INTEGER;
}

@concept Customer
{
    name: STRING;
}

@concept Product;

@concept Class
{
    ancestors: Class*;
    children: Class*;
    ranking: INTEGER;
}

