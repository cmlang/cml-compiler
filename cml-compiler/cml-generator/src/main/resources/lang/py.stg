
import "/lang/common.stg"
import "/patterns/getter.stg"

// Settings

lang ::= [
    "fields": false
]

// Structures

structure_block_preamble() ::= "<\n>"

// Blocks

block(statements) ::= <<
    <statements>
>>

block_header_terminator() ::= <<
:<\n>
>>

// Strings

type_string() ::= "str"

to_string_name() ::= "__str__"

to_string_expr(concept) ::= <<
"%s(<\\>
<if(concept.allProperties)><\\>
<concept.allProperties:{p|<getter_call(p)>=%s}; separator=", ">)" % (
    type(self).__name__,
    <to_string_fields(concept.allProperties, ",\n")>
)<\\>
<else><\\>
)" % type(self).__name__<\\>
<endif>
>>

to_string_field(property) ::= <<
self.<getter_call(property)>
>>

// Operations

operation_keyword() ::= "def "

interface_operation_body() ::= "    pass"

operation_header_content(name, params, result_type) ::= <<
<name>(self<commaIf(params)><params:var_decl(); separator=", ">)<\\>
<if(result_type)> -> <result_type><endif>
>>

var_decl(typed_element) ::= <<
<field_name(typed_element)>: <field_type(typed_element)>
>>

return(expression) ::= <<
return <expression>
>>

// Fields

field_init(named_element) ::= <<
<field_access(named_element)> = <field_name(named_element)>
>>

field_name(named_element) ::= <<
<named_element.name; format="underscore-case">
>>

field_access(named_element) ::= <<
self.__<field_name(named_element)>
>>

field_type_optional(type) ::= <<
<type_name(type)>
>>

field_type_set(type) ::= <<
Set[<type_name(type)>]
>>

field_decl(typed_element) ::= ""

// Getters

getter_name(property) ::= <<
<property.name; format="underscore-case">
>>

interface_getter_annotations(property) ::= <<
@abstractproperty<\n>
>>

class_getter_annotations(property) ::= <<
@property<\n>
>>

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
<type_name(type)>
>>

getter_type_set(type) ::= <<
Set[<type_name(type)>]
>>

getter_field_value_required(property) ::= <<
<field_access(property)>
>>

getter_field_value_optional(property) ::= <<
<field_access(property)>
>>

getter_field_value_set(property) ::= <<
<field_access(property)>
>>

getter_call(property) ::= <<
<property.name; format="underscore-case">
>>

// Interfaces

interface_keyword() ::= "class "

interface_ancestor_header(ancestors, ancestor_list) ::= <<
<\ >(ABC<if(ancestors)>, <ancestor_list><endif>)
>>

// Classes

class_keyword() ::= "class "

constructor_name(class_name) ::= "__init__"

// Ancestors

ancestor_list(abstract, ancestors, interfaces) ::= <<
<if(abstract || ancestors || interfaces)>(<endif><\\>
<if(abstract)>ABC<if(ancestors || interfaces)>, <endif><endif><\\>
<if(ancestors)><\\>
<ancestors:type_name();separator=", "><\\>
<if(interfaces)>, <endif><\\>
<endif><\\>
<if(interfaces)><interfaces:type_name();separator=", "><endif><\\>
<if(abstract || ancestors || interfaces)>)<endif>
>>

