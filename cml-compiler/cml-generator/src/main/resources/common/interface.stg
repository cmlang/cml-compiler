
import "/common/generic.stg"
import "/common/getter.stg"

interface(concept, classNameSuffix) ::= <<
<structure("interface", {<interface_header()>}, {<interface_declarations()>})>
>>

interface_header() ::= <<
<type_name(concept)><ancestor_list(true, concept.directAncestors, [])>
>>

interface_declarations() ::= <<
<concept.properties:interface_getter();separator="\n"><\\>
<createMethodForClients(concept, classNameSuffix)><\\>
<createMethodForDescendants(concept, classNameSuffix)>
>>

createMethodForClients(concept, classNameSuffix) ::= <<
<if(!concept.abstract && classNameSuffix)>
<newLineIf(concept.properties)><\\>
static <type_name(concept)> create(<createParamList([], concept.allProperties)>)
{
    return new <type_name(concept)><classNameSuffix>(<createArgList([], concept.allProperties)>);
}<\\>
<endif>
>>

createMethodForDescendants(concept, classNameSuffix) ::= <<
<if((concept.abstract || concept.directAncestors) && classNameSuffix)>
<newLineIf(concept.properties)><\\>
static <type_name(concept)> create(<createParamList(concept.allAncestors, concept.properties)>)
{
    return new <type_name(concept)><classNameSuffix>(<createArgList(concept.allAncestors, concept.properties)>);
}<\\>
<endif>
>>

createParamList(ancestors, properties) ::= <<
<ancestors:createAncestorParam();separator=", "><\\>
<commaIf2(ancestors, properties)><\\>
<properties:createPropertyParam();separator=", ">
>>

createAncestorParam(concept) ::= <<
<type_name(concept)> <field_name(concept)>
>>

createPropertyParam(property) ::= <<
<field_type(property)> <field_name(property)>
>>

createArgList(ancestors, properties) ::= <<
<ancestors:createAncestorArg();separator=", "><\\>
<commaIf2(ancestors, properties)><\\>
<properties:createPropertyArg();separator=", ">
>>

createAncestorArg(concept) ::= <<
<field_name(concept)>
>>

createPropertyArg(property) ::= <<
<field_name(property)>
>>
