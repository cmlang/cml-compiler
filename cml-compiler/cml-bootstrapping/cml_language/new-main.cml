
concept CONCEPT: NAMED_ELEMENT, PROPERTY_LIST
{
    abstract_concept: BOOLEAN;

    generalizations: INHERITANCE*;
    specializations: INHERITANCE*;

    /ancestors = generalizations.ancestor;
    /descendants = specializations.descendant;

    /associations = model.associations | select: (ends | exists: concepto === self);

    /slot_properties = properties | select: slot;
    /association_properties = properties | select: present(assoc);

/*

    /init_properties = all_properties | select: init;
    /non_init_properties = all_properties | select: non_init;
    /printable_properties = all_properties | select: printable;

    /all_properties = concat(properties, non_redefined_properties);
    /non_redefined_properties = for p1 in inherited_properties, p2 in properties
                                    | reject: p1.name == p2.name
                                    | yield: p1
                                    | distinct;
    /inherited_properties = ancestors | yield: all_properties | distinct;
    /super_properties = non_redefined_properties | select: not derived;

    /dependencies = distinct(concat(inherited_dependencies, property_dependencies));
    /property_dependencies = distinct(concat(
                                transitive_property_concepts | yield: inherited_dependencies,
                                transitive_property_concepts | yield: name));
    /inherited_dependencies = all_ancestors | select: name | distinct;

    /transitive_property_concepts = self | recurse_depth: property_concepts;
    /property_concepts = property_types | reject: primitive | yield: concept | distinct;
    /property_types = all_properties | yield: type;

    /all_ancestors = self | recurse_depth: ancestors | distinct;

    /redefined_ancestors: CONCEPT_REDEF*;
    /redefined_inherited_concrete_properties: PROPERTY*;
*/
}

abstraction SCOPE: MODEL_ELEMENT
{
    members: MODEL_ELEMENT*;
}

concept LOCATION
{
    line: integer;
    column: integer;
    element: MODEL_ELEMENT;
}

association MEMBERSHIP
{
    MODEL_ELEMENT.parent;
    SCOPE.members;
}

association LOCALIZATION
{
    LOCATION.element;
    MODEL_ELEMENT.location;
}

abstraction TYPED_ELEMENT: NAMED_ELEMENT
{
    type: TIPO;
}

concept PROPERTY: TYPED_ELEMENT, SCOPE
{
    value: EXPRESSION?;
    declared_type: TIPO?;
    derived: boolean;
    type_required: boolean;
    type_allowed: boolean;
    association_end: ASSOCIATION_END?;

    /parent_concept = parent as? CONCEPT?;
    /assoc = model.associations | select: (ends | exists: property === self) | first;

    /concrete = not abstract;
    /abstract = derived and empty(value);
    /init = present(value) and not derived;
    /non_init = empty(value) and not derived;
    /slot = not (derived or present(association_end));
    /printable = (slot and not type.sequence) or type.primitive;
}

concept INHERITANCE: MODEL_ELEMENT
{
    ancestor: CONCEPT;
    descendant: CONCEPT;
}

association GENERALIZATION
{
    INHERITANCE.descendant;
    CONCEPT.generalizations;
}

association SPECIALIZATION
{
    INHERITANCE.ancestor;
    CONCEPT.specializations;
}

concept CONCEPT_REDEF
{
    concepto: CONCEPT;
    property_redefs: PROPERTY_REDEF*;
}

concept PROPERTY_REDEF
{
    property: PROPERTY;
    redefined: BOOLEAN;
}



