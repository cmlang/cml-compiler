
@abstraction CONCEPT: NAMED_ELEMENT, PROPERTY_LIST
{
    abstraction: BOOLEAN;

    generalizations: INHERITANCE*;
    specializations: INHERITANCE*;

    /ancestors = generalizations.ancestor;
    /descendants = specializations.descendant;

    /all_ancestors: CONCEPT* = distinct(concat(inherited_ancestors, ancestors));
    /all_properties: PROPERTY* = concat(properties, inherited_non_redefined_properties);

    /inherited_ancestors = distinct(ancestors.all_ancestors);
    /inherited_properties = distinct(ancestors.all_properties);
    /inherited_abstract_properties = inherited_properties | select: abstract;
    /inherited_non_redefined_properties = for inherited in inherited_properties
                                             | select: (for p in self.properties | none: p.name == inherited.name);

    /super_properties = inherited_non_redefined_properties | select: not derived;
    /non_derived_properties = properties
        | select: not derived
        | sort: p1, p2 ->
            if present(p1) and empty(p2) then +1
            else if empty(p1) and present(p2) then -1
            else 0;
    /invocation_properties = concat(super_properties, non_derived_properties);

    /slot_properties = properties | select: slot;
    /derived_properties = properties | select: derived;

    /init_properties = all_properties | select: init;
    /non_init_properties = all_properties | select: non_init;

    /property_types = all_properties | collect: type;

/*
    /associations = model.associations | select: (association_ends | exists: concept == self);

    /association_properties = properties | select: present(association);

    /printable_properties = all_properties | select: printable;

    /all_properties = concat(properties, non_redefined_properties);

    /dependencies = distinct(concat(inherited_dependencies, property_dependencies));
    /property_dependencies = distinct(concat(
                                transitive_property_concepts | collect: inherited_dependencies,
                                transitive_property_concepts | collect: name));
    /inherited_dependencies = all_ancestors | select: name | distinct;

    /transitive_property_concepts = self | recurse_depth: property_concepts;
    /property_concepts = property_types | reject: primitive | yield: concept | distinct;

    /redefined_ancestors: CONCEPT_REDEF*;
    /redefined_inherited_concrete_properties: PROPERTY*;
*/

}

@concept INHERITANCE
{
    ancestor: CONCEPT;
    descendant: CONCEPT;
}

@association GENERALIZATION
{
    INHERITANCE.descendant;
    CONCEPT.generalizations;
}

@association SPECIALIZATION
{
    INHERITANCE.ancestor;
    CONCEPT.specializations;
}

@concept CONCEPT_REDEF
{
    concept: CONCEPT;
    property_redefs: PROPERTY_REDEF*;
}

@concept PROPERTY_REDEF
{
    prop: PROPERTY; // shortened name because Python gets confused with a property called "property".
    redefined: BOOLEAN;
}
