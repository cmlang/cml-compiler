
@concept ASSOCIATION: NAMED_ELEMENT, SCOPE
{
    /association_ends = members as? ASSOCIATION_END*;

    /first_end = first(association_ends);
    /last_end = last(association_ends);

    /property_types = association_ends.associated_property.type;
    /reversed_property_types = reverse(property_types);

    /one_to_one = association_ends | all: one;
    /one_to_many = first_one_to_last_many or first_many_to_last_one;

    /first_one_to_last_many = first_end.one and last_end.many;
    /first_many_to_last_one = first_end.many and last_end.one;

    /one_property = if first_one_to_last_many then first_end.associated_property else last_end.associated_property;
    /many_property = if first_many_to_last_one then first_end.associated_property else last_end.associated_property;

    /diagnostic_id = "association " & name;
}

@concept ASSOCIATION_END: MODEL_ELEMENT
{
    concept_name: string;
    property_name: string;
    property_type: TYPE?;

    associated_concept: CONCEPT?;
    associated_property: PROPERTY?;

    /association = parent as? ASSOCIATION?;

    /associated_property_type = associated_property.type;

    /one = associated_property_type.single;
    /many = associated_property_type.sequence;

    /diagnostic_id = "association end " & concept_name & "." & property_name &
                        if present(property_type) then ": " & property_type.diagnostic_id as! string else "";
}

@association ASSOCIATION_END_PROPERTY
{
    ASSOCIATION_END.associated_property;
    PROPERTY.association_end;
}
