
@concept PROPERTY: TYPED_ELEMENT, SCOPE
{
    derived: BOOLEAN;
    declared_type: TYPE?;
    value: EXPRESSION?;
    association_end: ASSOCIATION_END?;

    /concept = parent as? CONCEPT?;
    /association = association_end.association;

    /concrete = not abstract;
    /abstract = derived and empty(value);
    /init = present(value) and not derived;
    /non_init = empty(value) and not derived;
    /slot = not (derived or present(association_end));
    /printable = (slot and not type.sequence) or type.primitive;

    /type = if present(declared_type) then declared_type as! TYPE
            else if present(value) then value.type.inferred_type as! TYPE
            else UNDEFINED_TYPE("No type or expression defined for property: " + name);

    /named_parent = parent as? NAMED_ELEMENT?;

    /diagnostic_id = if present(named_parent)
                        then "property " & named_parent.name + "." & name + ": " & type.diagnostic_id
                        else "property " & name + ": " & type.diagnostic_id;
}

@abstraction PROPERTY_LIST: SCOPE
{
    /properties = members as? PROPERTY*;
}

