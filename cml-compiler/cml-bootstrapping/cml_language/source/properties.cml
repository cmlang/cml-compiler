
@concept PROPERTY: TYPED_ELEMENT, SCOPE
{
/*
    value: EXPRESSION?;
    declared_type: TYPE?;
    derived: BOOLEAN;
    type_required: BOOLEAN;
    type_allowed: BOOLEAN;

    /model = concept.model;
    /concept = for p in parent | select: p is CONCEPT;
    /association = model.associations | select: (association_ends | exists: property == self) | first;

    /concrete = not abstract;
    /abstract = derived and empty(value);
    /init = present(value) and not derived;
    /non_init = empty(value) and not derived;
    /slot = not (derived or associationEnd);
    /association_end = present(association);
    /printable = (slot and not type.sequence) or type.primitive;
*/
}

@abstraction PROPERTY_LIST: SCOPE
{
/*
    /properties = for m in members | select: m is PROPERTY;

    /derivedProperties = properties | select: derived;

    /nonDerivedProperties = properties
        | select: not derived
        | sort: p1, p2 ->
            if present(p1) and empty(p2) then +1
            else if empty(p1) and present(p2) then -1
            else 0;
*/
}

