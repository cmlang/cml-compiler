
@abstraction EXPRESSION: SCOPE
{
  /kind: string;
  /type: TYPE;

  /operands = members as? EXPRESSION*;

  /matching_result_type = type;

  /boolean = type.boolean;
  /numeric = type.numeric;
  /float = type.float;

  /arithmetic = numeric or float;
  /relational = type.relational;
  /referential = type.referential;
  /primitive = type.primitive;
}

@concept LITERAL: EXPRESSION
{
  text: string;
  type: TYPE;

  /kind = "literal";
  /diagnostic_id = text;
}

@abstraction INFIX: EXPRESSION
{
  operator: string;

  /operation: string?;

  /left = first(operands) as! EXPRESSION;
  /right = last(operands) as! EXPRESSION;

  /diagnostic_id = left.diagnostic_id & " " & operator & " " & right.diagnostic_id;

  /boolean_type = VALUE_TYPE("", primitive_type_name("boolean"));
  /undefined_type = UNDEFINED_TYPE("Incompatible operand(s) for operator '" & operator & "':\n" &
                                   "- left operand is '" & left.diagnostic_id & ": " & left.type.diagnostic_id & "'\n" &
                                   "- right operand is '" & right.diagnostic_id & ": " & right.type.diagnostic_id & "'");

  /type =
    if left.type.undefined then left.type
    else if right.type.undefined then right.type
    else inferred_type;

  /inferred_type: TYPE;
}

@concept ARITHMETIC: INFIX
{
  /kind = "arithmetic";

  /operation =
    if operator == "+" then "add" as! string?
    else if operator == "-" then "sub" as! string?
    else if operator == "*" then "mul" as! string?
    else if operator == "/" then "div" as! string?
    else if operator == "%" then "mod" as! string?
    else if operator == "^" then "exp" as! string? // type-casting necessary until conditionals are fixed to support "none"
    else none;

  /inferred_type =
    if left.arithmetic and right.arithmetic then
    (
      if subtype(left.type.name, right.type.name) then right.type
      else if subtype(right.type.name, left.type.name) then left.type
      else undefined_type
    )
    else undefined_type;
}

@concept LOGICAL: INFIX
{
  /kind = "logical";

  /operation = operator as? string?;

  /inferred_type = if left.boolean and right.boolean then boolean_type else undefined_type;
}

@concept RELATIONAL: INFIX
{
  /kind = "relational";

  /operation =
    if operator == "==" then "eq" as! string?
    else if operator == "!=" then "not_eq" as! string?
    else if operator == ">" then "gt" as! string?
    else if operator == ">=" then "gte" as! string?
    else if operator == "<" then "lt" as! string?
    else if operator == "<=" then "lte" as! string? // type-casting necessary until conditionals are fixed to support "none"
    else none;

  /inferred_type = if left.relational and right.relational then boolean_type else undefined_type;
}

@concept REFERENTIAL: INFIX
{
  /kind = "referential";

  /operation =
    if operator == "===" then "ref_eq" as! string?
    else if operator == "!==" then "not_ref_eq" as! string? // type-casting necessary until conditionals are fixed to support "none"
    else none;

  /inferred_type = if left.referential and right.referential then boolean_type else undefined_type;
}

@concept STRING_CONCAT: INFIX
{
  /kind = "string_concat";

  /operation =
    if operator == "&" then kind as! string? // type-casting necessary until conditionals are fixed to support "none"
    else none;

  /string_type = VALUE_TYPE("", primitive_type_name("string"));

  /inferred_type = if left.primitive and right.primitive then string_type else undefined_type;
}

@abstraction CONDITIONAL: EXPRESSION
{
  /kind = "conditional";

  /condExpr = first(operands) as! EXPRESSION;
  /thenExpr = first(operands | select: o -> o !== condExpr and o !== elseExpr) as! EXPRESSION;
  /elseExpr = last(operands) as! EXPRESSION;

  /diagnostic_id = "if " & condExpr.diagnostic_id & " then " & thenExpr.diagnostic_id & " else " & elseExpr.diagnostic_id;
}